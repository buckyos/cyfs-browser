diff --git a/net/url_request/url_request.cc b/net/url_request/url_request.cc
index af554caadbebc99c92141826852afe9d8679c29a..9acfdbf762d2e870c4a0d854ef22aabf671dceff 100644
--- a/net/url_request/url_request.cc
+++ b/net/url_request/url_request.cc
@@ -548,19 +548,19 @@ void URLRequest::Start() {
   load_timing_info_.request_start_time = response_info_.request_time;
   load_timing_info_.request_start = base::TimeTicks::Now();
 
-  if (network_delegate()) {
-    OnCallToDelegate(NetLogEventType::NETWORK_DELEGATE_BEFORE_URL_REQUEST);
-    int error = network_delegate()->NotifyBeforeURLRequest(
-        this,
-        base::BindOnce(&URLRequest::BeforeRequestComplete,
-                       base::Unretained(this)),
-        &delegate_redirect_url_);
-    // If ERR_IO_PENDING is returned, the delegate will invoke
-    // |BeforeRequestComplete| later.
-    if (error != ERR_IO_PENDING)
-      BeforeRequestComplete(error);
-    return;
-  }
+  // if (network_delegate()) {
+  //   OnCallToDelegate(NetLogEventType::NETWORK_DELEGATE_BEFORE_URL_REQUEST);
+  //   int error = network_delegate()->NotifyBeforeURLRequest(
+  //       this,
+  //       base::BindOnce(&URLRequest::BeforeRequestComplete,
+  //                      base::Unretained(this)),
+  //       &delegate_redirect_url_);
+  //   // If ERR_IO_PENDING is returned, the delegate will invoke
+  //   // |BeforeRequestComplete| later.
+  //   if (error != ERR_IO_PENDING)
+  //     BeforeRequestComplete(error);
+  //   return;
+  // }
 
   StartJob(context_->job_factory()->CreateJob(this));
 }
@@ -681,7 +681,7 @@ void URLRequest::StartJob(std::unique_ptr<URLRequestJob> job) {
     if (!network_delegate() ||
         !network_delegate()->CancelURLRequestWithPolicyViolatingReferrerHeader(
             *this, url(), referrer_url)) {
-      referrer_.clear();
+      // referrer_.clear();
     } else {
       // We need to clear the referrer anyway to avoid an infinite recursion
       // when starting the error job.
@@ -998,6 +998,10 @@ bool URLRequest::DefaultCanUseCookies() {
   return g_default_can_use_cookies;
 }
 
+void URLRequest::PushURL(const GURL& url) {
+  url_chain_.push_back(url);
+}
+
 const URLRequestContext* URLRequest::context() const {
   return context_;
 }
