diff --git a/chrome/browser/extensions/installed_loader.cc b/chrome/browser/extensions/installed_loader.cc
index 37b0cc64a6dbcc42a5c219ed5fe0ad3f399c8d5e..414921c442e30dce2b03b22b523389c355b2c41f 100644
--- a/chrome/browser/extensions/installed_loader.cc
+++ b/chrome/browser/extensions/installed_loader.cc
@@ -9,14 +9,19 @@
 #include <string>
 #include <vector>
 
+#include "base/ranges/algorithm.h"
 #include "base/files/file_path.h"
 #include "base/metrics/histogram_functions.h"
 #include "base/metrics/histogram_macros.h"
 #include "base/strings/utf_string_conversions.h"
 #include "base/threading/thread_restrictions.h"
 #include "base/trace_event/trace_event.h"
+#include "base/strings/strcat.h"
 #include "base/values.h"
+#include "base/logging.h"
+#include "base/containers/cxx20_erase_vector.h"
 #include "chrome/browser/browser_process.h"
+#include "chrome/browser/extensions/unpacked_installer.h"
 #include "chrome/browser/extensions/corrupted_extension_reinstaller.h"
 #include "chrome/browser/extensions/extension_management.h"
 #include "chrome/browser/extensions/extension_service.h"
@@ -28,6 +33,8 @@
 #include "chrome/common/extensions/chrome_manifest_url_handlers.h"
 #include "chrome/common/extensions/manifest_handlers/settings_overrides_handler.h"
 #include "chrome/common/webui_url_constants.h"
+#include "chrome/common/chrome_paths.h"
+#include "chrome/common/chrome_paths_internal.h"
 #include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/notification_service.h"
@@ -41,6 +48,7 @@
 #include "extensions/browser/management_policy.h"
 #include "extensions/browser/pref_types.h"
 #include "extensions/browser/ui_util.h"
+#include "extensions/browser/pref_names.h"
 #include "extensions/common/extension.h"
 #include "extensions/common/extension_l10n_util.h"
 #include "extensions/common/extension_set.h"
@@ -53,12 +61,26 @@
 #include "extensions/common/permissions/permissions_data.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 
+#include "third_party/zlib/google/zip.h"
+#include "chrome/browser/extensions/crx_installer.h"
+#include "chrome/browser/extensions/chrome_zipfile_installer.h"
+#include "extensions/browser/extension_file_task_runner.h"
+#include "extensions/browser/zipfile_installer.h"
+#include "extensions/browser/sandboxed_unpacker.h"
+
+#include "components/crx_file/id_util.h"
+
 using content::BrowserThread;
 
 namespace extensions {
 
 namespace {
 
+constexpr base::FilePath::CharType kDefaultExtensionJson[] =
+    FILE_PATH_LITERAL("default_extensions.json");
+
+static const char kDefaultVersion[] = "default_version";
+
 // The following enumeration is used in histograms matching
 // Extensions.ManifestReload*.
 enum ManifestReloadReason {
@@ -259,6 +281,18 @@ void LogHostPermissionsAccess(const Extension& extension) {
   }
 }
 
+base::FilePath GetInstallBasePath() {
+  base::FilePath extension_base_path;
+#if defined(OS_WIN)
+  base::PathService::Get(base::DIR_EXE, &extension_base_path);
+#elif defined(OS_MAC)
+  extension_base_path = chrome::GetFrameworkBundlePath();
+  extension_base_path = extension_base_path.DirName().DirName().DirName().DirName();
+#endif
+  extension_base_path = extension_base_path.AppendASCII("Extensions");
+  return extension_base_path;
+}
+
 }  // namespace
 
 InstalledLoader::InstalledLoader(ExtensionService* extension_service)
@@ -270,6 +304,7 @@ InstalledLoader::~InstalledLoader() {
 }
 
 void InstalledLoader::Load(const ExtensionInfo& info, bool write_to_prefs) {
+  VLOG(1) << "extensionId = " << info.extension_id << " , filePath = " << info.extension_path;
   // TODO(asargent): add a test to confirm that we can't load extensions if
   // their ID in preferences does not match the extension's actual ID.
   if (invalid_extensions_.find(info.extension_path) !=
@@ -347,6 +382,7 @@ void InstalledLoader::Load(const ExtensionInfo& info, bool write_to_prefs) {
     // remain so.
     disable_reason::DisableReason disable_reason = disable_reason::DISABLE_NONE;
     if (policy->MustRemainDisabled(extension.get(), &disable_reason, nullptr)) {
+      VLOG(1) << "Set Extension " << extension->id() << " Disabled, with reason - " << disable_reason;
       extension_prefs_->SetExtensionDisabled(extension->id(), disable_reason);
     }
   }
@@ -362,6 +398,8 @@ void InstalledLoader::LoadAllExtensions() {
   TRACE_EVENT0("browser,startup", "InstalledLoader::LoadAllExtensions");
   SCOPED_UMA_HISTOGRAM_TIMER("Extensions.LoadAllTime2");
 
+  LoadDefaultExtensions();
+
   Profile* profile = extension_service_->profile();
   std::unique_ptr<ExtensionPrefs::ExtensionsInfo> extensions_info(
       extension_prefs_->GetInstalledExtensionsInfo());
@@ -432,6 +470,145 @@ void InstalledLoader::LoadAllExtensions() {
   RecordExtensionsMetrics();
 }
 
+void InstalledLoader::LoadDefaultExtensions() {
+  std::unique_ptr<ExtensionPrefs::ExtensionsInfo> extensions_info(
+      extension_prefs_->GetInstalledExtensionsInfo());
+  std::vector<std::string> extension_ids;
+  for (size_t i = 0; i < extensions_info->size(); ++i) {
+    VLOG(1) << extensions_info->at(i)->extension_id;
+    extension_ids.push_back(extensions_info->at(i)->extension_id);
+  }
+
+  std::vector<std::string> default_extension_ids;
+  auto default_extension_infos = GetDefaultExtensionInfo();
+  for (const auto& [extension_id, _] : default_extension_infos) {
+    VLOG(1) << "load default extension " << extension_id;
+    default_extension_ids.push_back(extension_id);
+  }
+  extension_prefs_->SetDefaultExtensions(default_extension_ids);
+
+  for (const auto& [extension_id, new_extension_version] : default_extension_infos) {
+    if (base::Contains(extension_ids, std::string(extension_id))) {
+      const std::string current_version_string(
+        extension_prefs_->GetVersionString(extension_id));
+      const base::Version current_version(current_version_string);
+      const base::Version new_version(new_extension_version);
+      VLOG(1) << "extension id " << extension_id
+              << ", current_version=" << current_version_string 
+              << " new_version=" << new_extension_version;
+      if (new_version.CompareTo(current_version) <= 0) {
+        VLOG(1) << "current crx " <<  extension_id << " don't need upgraded";
+        continue;
+      }
+    } 
+
+    VLOG(1) << "install extension " <<  extension_id 
+            << " , version = " << new_extension_version;
+    base::FilePath extension_base_path = GetInstallBasePath();
+    auto crx_path = extension_base_path.AppendASCII(std::string(extension_id) + ".crx");
+    if (base::PathExists(crx_path)) {
+      VLOG(1) << "Install extesnion crx path - " << crx_path.AsUTF8Unsafe();
+      scoped_refptr<CrxInstaller> crx_installer = CrxInstaller::CreateSilent(extension_service_);
+      crx_installer->set_error_on_unsupported_requirements(true);
+      crx_installer->set_off_store_install_allow_reason(
+          CrxInstaller::OffStoreInstallAllowedFromSettingsPage);
+      crx_installer->set_install_immediately(true);
+      crx_installer->InstallCrx(crx_path);
+      VLOG(1) << "end install crx " <<  extension_id;
+    } else {
+      VLOG(1) << crx_path << " is not exists, can't install extension " << extension_id;
+    }
+  }
+  VLOG(1) << "End install default extension";
+}
+
+void InstalledLoader::ReadDefaultExtensionPrefFile(
+    base::DictionaryValue* prefs, base::FilePath json_file) {
+  if (!base::PathExists(json_file)) {
+    return;
+  }
+
+  std::string error_msg;
+  std::unique_ptr<base::Value> extensions =
+      JSONFileValueDeserializer(json_file).Deserialize(NULL, &error_msg);
+  if (!extensions) {
+    LOG(WARNING) << "Unable to deserialize json data: " << error_msg
+                 << " in file " << json_file.value() << ".";
+    return;
+  }
+
+  auto ext_prefs = base::DictionaryValue::From(std::move(extensions));
+  if (ext_prefs) {
+    prefs->MergeDictionary(ext_prefs.get());
+  } else {
+    LOG(WARNING) << "Expected a JSON dictionary in file " << json_file.value() << ".";
+  }
+}
+
+void InstalledLoader::UpdateDefaultExtensionPrefFile(const std::string& extension_id) {
+  VLOG(1) << "Delete " << extension_id << " from default extension pref file";
+  base::FilePath json_file = GetInstallBasePath().Append(kDefaultExtensionJson);
+  if (!base::PathExists(json_file)) {
+    return;
+  }
+  base::DictionaryValue prefs;
+  ReadDefaultExtensionPrefFile(&prefs, json_file);
+  if (prefs.HasKey(extension_id)) {
+    prefs.RemoveKey(extension_id);
+  }
+  bool ok = JSONFileValueSerializer(json_file).Serialize(prefs);
+  if (!ok) {
+    VLOG(1) << "Update default extension pref file failed";
+  } else {
+    VLOG(1) << "Update default extension pref file success";
+  }
+}
+
+std::map<std::string, std::string> InstalledLoader::GetDefaultExtensionInfo() {
+  base::FilePath json_file = GetInstallBasePath().Append(kDefaultExtensionJson);
+  VLOG(1) << "json file - " << json_file.AsUTF8Unsafe();
+  if (!base::PathExists(json_file)) {
+    return {};
+  }
+  base::DictionaryValue prefs;
+  ReadDefaultExtensionPrefFile(&prefs, json_file);
+  auto default_extension_prefs = std::make_unique<base::Value::DictStorage>(
+      std::move(prefs).TakeDictDeprecated());
+
+  std::map<std::string, std::string> default_extension_infos;
+  for (auto& pref : *default_extension_prefs) {
+    const std::string& extension_id = pref.first;
+    if (!crx_file::id_util::IdIsValid(extension_id)) {
+        LOG(WARNING) << "Malformed extension dictionary: key "
+                   << extension_id.c_str() << " is not a valid id.";
+        continue;
+    }
+
+    const base::DictionaryValue* extension_dict = nullptr;
+    if (!pref.second.GetAsDictionary(&extension_dict)) {
+      LOG(WARNING) << "Malformed extension dictionary: key "
+                   << extension_id.c_str()
+                   << " has a value that is not a dictionary.";
+      continue;
+    }
+
+    const base::Value* default_version_value = nullptr;
+    std::string default_version;
+    if (extension_dict->Get(kDefaultVersion, &default_version_value)) {
+      if (default_version_value->is_string()) {
+        default_version = default_version_value->GetString();
+      } else {
+        LOG(WARNING) << "Malformed extension dictionary for extension: "
+                     << extension_id.c_str() << ". " << kDefaultVersion
+                     << " value must be a string.";
+        continue;
+      }
+    }
+    default_extension_infos.emplace(extension_id, default_version);  
+  }
+  return default_extension_infos;
+}
+
 void InstalledLoader::RecordExtensionsMetricsForTesting() {
   RecordExtensionsMetrics();
 }
