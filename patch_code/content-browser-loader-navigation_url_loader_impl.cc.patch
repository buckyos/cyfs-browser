diff --git a/content/browser/loader/navigation_url_loader_impl.cc b/content/browser/loader/navigation_url_loader_impl.cc
index dbecaf0a549233e22acd91d231e7d3e11ad6e4d7..a65503a26abd2aebdef22a5ccb80ac7865bc03d1 100644
--- a/content/browser/loader/navigation_url_loader_impl.cc
+++ b/content/browser/loader/navigation_url_loader_impl.cc
@@ -529,6 +529,7 @@ void NavigationURLLoaderImpl::MaybeStartLoader(
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK(started_);
 
+  ReplaceRequestUrl();
   if (single_request_factory) {
     // `interceptor` wants to handle the request with
     // `single_request_handler`.
@@ -622,6 +623,43 @@ void NavigationURLLoaderImpl::MaybeStartLoader(
       GetUIThreadTaskRunner({BrowserTaskType::kNavigationNetworkResponse}));
 }
 
+void NavigationURLLoaderImpl::ReplaceRequestUrl() {
+  constexpr char kLocalhost[] = "127.0.0.1";
+  static constexpr int default_ipfs_port = 38095;
+  static constexpr int default_cyfs_port = 38090;
+  GURL orignal_request_url = resource_request_->url;
+  if (orignal_request_url.SchemeIsCYFS()) {
+    // translate cyfs url to local http url
+    auto host_str = orignal_request_url.host();
+    auto old_path_str = orignal_request_url.path();
+    auto new_url_path_str = "/" + host_str + old_path_str;
+
+    GURL::Replacements replacements;
+    replacements.SetSchemeStr(url::kHttpScheme);
+    replacements.SetHostStr(kLocalhost);
+    replacements.SetPortStr(std::to_string(default_cyfs_port).c_str());
+    replacements.SetPathStr(new_url_path_str);
+    GURL new_url = orignal_request_url.ReplaceComponents(replacements);
+    LOG(INFO) << "After ReplaceRequestUrl URL = " << new_url.spec();
+    resource_request_->url = new_url;
+
+  } else if (orignal_request_url.SchemeIsIPFS() || orignal_request_url.SchemeIsIPNS()) {
+    // translate ipfs/ipns url to local http url
+    auto host_str = orignal_request_url.host();
+    auto old_path_str = orignal_request_url.path();
+    auto new_url_path_str = (orignal_request_url.SchemeIsIPFS() ? "/ipfs/" : "/ipns/") +  host_str + old_path_str;
+
+    GURL::Replacements replacements;
+    replacements.SetSchemeStr(url::kHttpScheme);
+    replacements.SetHostStr(kLocalhost);
+    replacements.SetPortStr(std::to_string(default_ipfs_port).c_str());
+    replacements.SetPathStr(new_url_path_str);
+    GURL new_url = orignal_request_url.ReplaceComponents(replacements);
+    LOG(INFO) << "After ReplaceRequestUrl URL = " << new_url.spec();
+    resource_request_->url = new_url;
+  }
+}
+
 void NavigationURLLoaderImpl::FallbackToNonInterceptedRequest(
     bool reset_subresource_loader_params) {
   if (reset_subresource_loader_params)
@@ -656,6 +694,8 @@ NavigationURLLoaderImpl::PrepareForNonInterceptedRequest(
   // further refactor the factory getters to avoid this.
   scoped_refptr<network::SharedURLLoaderFactory> factory;
 
+  ReplaceRequestUrl();
+
   const bool should_be_handled_by_network_service =
       network::IsURLHandledByNetworkService(resource_request_->url) ||
       resource_request_->web_bundle_token_params.has_value();
