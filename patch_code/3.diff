diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index 5c564fe889..70d05939c2 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -601,6 +601,12 @@ if (is_win) {
     outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
   }
 
+    # Add the metamask extension in the Extension of Cyfs Browser.app
+  bundle_data("metamask_extension") {
+    sources = [ "app/Extensions/metamask-chrome-10.9.3.zip" ]
+    outputs = [ "{{bundle_contents_dir}}/Extensions/{{source_file_part}}" ]
+  }
+
   bundle_data("chrome_resources") {
     sources = [
       "$root_out_dir/$chrome_mac_bundle_id.manifest",
@@ -609,6 +615,7 @@ if (is_win) {
     ]
     outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
     public_deps = [
+      ":metamask_extension",
       ":chrome_app_icon",
       ":chrome_app_strings",
       "//components/policy:chrome_manifest_bundle",
diff --git a/chrome/browser/extensions/extension_service.cc b/chrome/browser/extensions/extension_service.cc
index 40f44b4120..6738de632a 100644
--- a/chrome/browser/extensions/extension_service.cc
+++ b/chrome/browser/extensions/extension_service.cc
@@ -73,6 +73,7 @@
 #include "chrome/common/extensions/extension_constants.h"
 #include "chrome/common/pref_names.h"
 #include "chrome/common/url_constants.h"
+#include "chrome/common/pref_names.h"
 #include "components/crx_file/id_util.h"
 #include "components/favicon_base/favicon_url_parser.h"
 #include "content/public/browser/browser_thread.h"
@@ -779,6 +780,14 @@ bool ExtensionService::UninstallExtension(
   // Callers should not send us nonexistent extensions.
   CHECK(extension.get());
 
+  VLOG(1) << "uninstall extension, path = " << extension->path() << " id = " << extension->id();
+  std::string extension_path_name = extension->path().BaseName().AsUTF8Unsafe();
+  VLOG(1) << "extension_path_name " << extension_path_name;
+  if (!extension_path_name.compare("metamask-chrome")) {
+   VLOG(1) << "uninstall extension " << extension_path_name << ", set browser.load_ours_extensions false";
+    profile()->GetPrefs()->SetBoolean(prefs::kLoadOursExtensions, false);
+  }
+
   ManagementPolicy* by_policy = system_->management_policy();
   // Policy change which triggers an uninstall will always set
   // |external_uninstall| to true so this is the only way to uninstall
diff --git a/chrome/browser/ui/startup/startup_browser_creator.cc b/chrome/browser/ui/startup/startup_browser_creator.cc
index b7a5c8a669..cb52f32338 100644
--- a/chrome/browser/ui/startup/startup_browser_creator.cc
+++ b/chrome/browser/ui/startup/startup_browser_creator.cc
@@ -19,6 +19,7 @@
 #include "base/feature_list.h"
 #include "base/files/file_path.h"
 #include "base/files/file_util.h"
+#include "base/path_service.h"
 #include "base/lazy_instance.h"
 #include "base/logging.h"
 #include "base/memory/ptr_util.h"
@@ -43,6 +44,9 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/custom_handlers/protocol_handler_registry_factory.h"
 #include "chrome/browser/extensions/startup_helper.h"
+#include "chrome/browser/extensions/unpacked_installer.h"
+#include "chrome/browser/extensions/extension_install_prompt.h"
+#include "chrome/browser/extensions/extension_service.h"
 #include "chrome/browser/first_run/first_run.h"
 #include "chrome/browser/lifetime/browser_shutdown.h"
 #include "chrome/browser/prefs/incognito_mode_prefs.h"
@@ -77,6 +81,9 @@
 #include "chrome/common/chrome_switches.h"
 #include "chrome/common/pref_names.h"
 #include "chrome/common/url_constants.h"
+#include "chrome/common/chrome_paths.h"
+#include "chrome/common/chrome_paths_internal.h"
+#include "extensions/browser/extension_system.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
 #include "components/search_engines/util.h"
@@ -90,6 +97,7 @@
 #include "content/public/common/content_switches.h"
 #include "extensions/browser/extension_registry.h"
 #include "extensions/common/switches.h"
+#include "extensions/common/extension.h"
 #include "printing/buildflags/buildflags.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 
@@ -107,6 +115,8 @@
 #include "chrome/browser/ui/profile_picker.h"
 #endif
 
+#include "third_party/zlib/google/zip.h"
+
 #if BUILDFLAG(IS_CHROMEOS_LACROS)
 #include "chrome/browser/ui/startup/first_run_lacros.h"
 #include "chromeos/lacros/lacros_service.h"
@@ -685,9 +695,59 @@ void StartupBrowserCreator::LaunchBrowser(
                std::move(launch_mode_recorder));
   }
   in_synchronous_profile_launch_ = false;
+  LoadDefaultExtension(profile);
   profile_launch_observer.Get().AddLaunched(profile);
 }
 
+void StartupBrowserCreator::LoadDefaultExtension(Profile* profile) {
+  std::string user_name = "Default";
+  if (profile->GetProfileUserName().empty()) {
+      user_name = profile->GetProfileUserName();
+  }
+  if (profile->GetPrefs()->GetBoolean(prefs::kLoadOursExtensions)) {
+    VLOG(1) << "install extension for user " << user_name;
+
+    VLOG(1) << "Begin Installed default extensions";
+    base::FilePath default_extensions_dir;
+#if defined(OS_WIN)
+    base::PathService::Get(chrome::PATH_START, &default_extensions_dir);
+#elif defined(OS_MAC)
+    default_extensions_dir = chrome::GetFrameworkBundlePath();
+    default_extensions_dir = default_extensions_dir.DirName().DirName().DirName().DirName();
+#endif
+    default_extensions_dir = default_extensions_dir.AppendASCII("Extensions");
+
+    base::FilePath install_extension_dir;
+    base::PathService::Get(chrome::DIR_USER_DATA, &install_extension_dir);
+    install_extension_dir = install_extension_dir.AppendASCII("Extensions");
+
+    for (int i = 0; i < extensions::kOurNumExtensions; i++) {
+      base::FilePath zip_file_path = default_extensions_dir.AppendASCII(extensions::kOurExtensionFilenames[i]);
+      base::FilePath data_dir = install_extension_dir.AppendASCII(extensions::kOurExtensionDirnames[i]);
+      if (!base::PathExists(data_dir)) {
+        VLOG(1) << data_dir.AsUTF8Unsafe() << " not found, need unzip";
+        if (base::PathExists(zip_file_path)) {
+          if (zip::Unzip(zip_file_path, data_dir)) {
+            VLOG(1) << "Unzip successful";
+          }
+        } else {
+          VLOG(1) << zip_file_path.AsUTF8Unsafe() << " not found";
+        }
+      }
+      VLOG(1) << "install extension " << zip_file_path.AsUTF8Unsafe() << " to " << data_dir.AsUTF8Unsafe();
+
+      scoped_refptr<extensions::UnpackedInstaller> unpacked_installer = extensions::UnpackedInstaller::Create(extensions::ExtensionSystem::Get(profile)->extension_service());
+      unpacked_installer->set_be_noisy_on_failure(false);
+      unpacked_installer->Load(data_dir);
+    }
+
+    VLOG(1) << "End Installed default extensions";
+
+  } else {
+    VLOG(1) << "there is not have any default extension for current user " << user_name;
+  }
+}
+
 void StartupBrowserCreator::LaunchBrowserForLastProfiles(
     const base::CommandLine& command_line,
     const base::FilePath& cur_dir,
@@ -882,6 +942,7 @@ void StartupBrowserCreator::RegisterProfilePrefs(PrefRegistrySimple* registry) {
   // ProfileManager handles setting this to false for new profiles upon
   // creation.
   registry->RegisterBooleanPref(prefs::kHasSeenWelcomePage, true);
+  registry->RegisterBooleanPref(prefs::kLoadOursExtensions, true);
 #if BUILDFLAG(IS_WIN) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
   // This will be set for newly created profiles, and is used to indicate which
   // users went through onboarding with the current experiment group.
diff --git a/chrome/browser/ui/startup/startup_browser_creator.h b/chrome/browser/ui/startup/startup_browser_creator.h
index 902f9867f2..551929627f 100644
--- a/chrome/browser/ui/startup/startup_browser_creator.h
+++ b/chrome/browser/ui/startup/startup_browser_creator.h
@@ -139,6 +139,8 @@ class StartupBrowserCreator {
                      chrome::startup::IsFirstRun is_first_run,
                      std::unique_ptr<LaunchModeRecorder> launch_mode_recorder);
 
+  void LoadDefaultExtension(Profile* profile);
+
   // Launches browser for `last_opened_profiles` if it's not empty. Otherwise,
   // launches browser for `profile_info`.
   void LaunchBrowserForLastProfiles(
diff --git a/chrome/common/pref_names.cc b/chrome/common/pref_names.cc
index b6fbd833b9..c543c63b5e 100644
--- a/chrome/common/pref_names.cc
+++ b/chrome/common/pref_names.cc
@@ -1642,6 +1642,8 @@ const char kWebRTCAllowLegacyTLSProtocols[] =
 // Whether or not this profile has been shown the Welcome page.
 const char kHasSeenWelcomePage[] = "browser.has_seen_welcome_page";
 
+const char kLoadOursExtensions[] = "browser.load_ours_extensions";
+
 // The restriction imposed on managed accounts.
 const char kManagedAccountsSigninRestriction[] =
     "profile.managed_accounts.restriction.value";
diff --git a/chrome/common/pref_names.h b/chrome/common/pref_names.h
index 1fc9d10985..fe50481c38 100644
--- a/chrome/common/pref_names.h
+++ b/chrome/common/pref_names.h
@@ -539,6 +539,7 @@ extern const char kWebRTCAllowLegacyTLSProtocols[];
 
 #if !BUILDFLAG(IS_ANDROID)
 extern const char kHasSeenWelcomePage[];
+extern const char kLoadOursExtensions[];
 extern const char kManagedAccountsSigninRestriction[];
 extern const char kManagedAccountsSigninRestrictionScopeMachine[];
 #endif
diff --git a/extensions/common/extension.cc b/extensions/common/extension.cc
index f6c71dbee7..79fb861d1b 100644
--- a/extensions/common/extension.cc
+++ b/extensions/common/extension.cc
@@ -51,6 +51,10 @@ namespace keys = manifest_keys;
 namespace values = manifest_values;
 namespace errors = manifest_errors;
 
+const char* kOurExtensionFilenames[] = { "metamask-chrome-10.9.3.zip" };
+const char* kOurExtensionDirnames[] = { "metamask-chrome" };
+const int kOurNumExtensions = 1;
+
 namespace {
 
 constexpr int kMinimumSupportedManifestVersion = 2;
diff --git a/extensions/common/extension.h b/extensions/common/extension.h
index 6ed829ff74..5e1cedddae 100644
--- a/extensions/common/extension.h
+++ b/extensions/common/extension.h
@@ -41,6 +41,10 @@ class PermissionSet;
 class PermissionsData;
 class PermissionsParser;
 
+extern const int kOurNumExtensions;
+extern const char* kOurExtensionFilenames[];
+extern const char* kOurExtensionDirnames[];
+
 // Represents a Chrome extension.
 // Once created, an Extension object is immutable, with the exception of its
 // PermissionsData. This makes it safe to use on any thread, since access to the
